<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Symfony\Cmf\Component\Routing\RouteObjectInterface;

/**
 * Implements hook_theme_suggestions_alter().
 */
function grundsalg_theme_suggestions_field_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = 'field__' . $variables['element']['#entity_type'] . '__' . $variables['element']['#field_name'] . '__' . $variables['element']['#bundle'] . '__' . $variables['element']['#view_mode'];
}


/**
 * Implements hook_preprocess_menu().
 */
function grundsalg_preprocess_menu(&$variables) {
  $variables['hamburger_menu'] = FALSE;
  $current_path = \Drupal::request()->getRequestUri();
  if ($variables['menu_name'] == 'hamburger-menu') {
    // The only way to identify which region is rendering the menu block is to
    // check for expanded (Main nav does not have any children and neither of
    // the parents are expanded.). This won't work if for some reason none of
    // the menu items have any children,
    foreach ($variables['items'] as $key => $item) {
      $variables['items'][$key]['attributes']->addClass('nav--link');
      $variables['hamburger_menu'] = TRUE;
    }
  }

  if ($variables['menu_name'] == 'main') {
    foreach ($variables['items'] as $key => $item) {
      // Look for  certain paths and add additional classes.
      if ($item['url']->toString() == $current_path) {
        switch ($current_path) {
          case '/villagrunde' :
            $variables['items'][$key]['type'] = 'villa';
            break;
          case '/erhvervsgrunde' :
            $variables['items'][$key]['type'] = 'erhverv';
            break;
          case '/storparceller' :
            $variables['items'][$key]['type'] = 'storparcel';
            break;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function grundsalg_preprocess_page(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];
    if ($node->hasField('field_plot_type') && !empty($node->get('field_plot_type')->target_id)) {
      $variables['plot_type'] = $node->get('field_plot_type')->referencedEntities()[0]->getName();
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function grundsalg_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->hasField('field_plot_type') && !empty($node->get('field_plot_type')->target_id)) {
    $variables['plot_type'] = $node->get('field_plot_type')->referencedEntities()[0]->getName();
    $variables['child_nodes'] = views_embed_view('grundsalg_node_children', 'block_1', $node->id());
  }
}


/**
 * Implements hook_preprocess_field().
 */
function grundsalg_preprocess_field(&$variables) {
  switch ($variables['element']['#field_name']) {
    case 'field_itk_media_mime_type' :
      $variables['mime_type'] = $variables['element']['0']['#context']['value'];
      break;
  }
}

/**
 * Implements hook_preprocess_file_link().
 */
function grundsalg_preprocess_file_link(&$variables) {
  if (empty($variables['description'])) {
    $link_text = $variables['file']->getFilename();
  }
  else {
    $link_text = $variables['description'];
  }
  $options['attributes']['class'] = 'content-box--link-with-icon-text';
  $url = file_create_url($variables['file']->getFileUri());
  $variables['link'] = Link::fromTextAndUrl($link_text, Url::fromUri($url, $options));
}

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Ensures that the right class is added to the breadcrumb based on plot type.
 */
function grundsalg_preprocess_breadcrumb(&$variables) {
  $request = \Drupal::request();
  $route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT);
  if ($route->getPath() == '/node/{node}') {
    $node = $request->get('node');
    if ($node->hasField('field_plot_type')) {
      $variables['plot_type'] = $node->get('field_plot_type')->referencedEntities()[0]->getName();

      // Set the cache context to depend on url. So the breadcrumb class can be
      // changed based on the page and the plot type.
      $variables['#cache']['contexts'][] = 'url';
    }
  }
}